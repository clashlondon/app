{"ast":null,"code":"var _jsxFileName = \"/Users/mbp/Sites/london-clash-nextjs/components/WarPerformance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar processData = function processData(items) {\n  var participants = [];\n  items.forEach(function (war, i) {\n    console.log(\"war \".concat(i), war);\n    war.participants.forEach(function (_ref) {\n      var name = _ref.name,\n          battlesPlayed = _ref.battlesPlayed,\n          wins = _ref.wins;\n      var userObj = findUser(name);\n\n      if (!!userObj) {\n        userObj.battlesPlayed += battlesPlayed;\n        userObj.wins += wins;\n      } else {\n        userObj = {\n          name: name,\n          battlesPlayed: battlesPlayed,\n          wins: wins\n        };\n        participants.push(userObj);\n      }\n    });\n  });\n  return participants.sort(function (a, b) {\n    return b[\"wins\"] - a[\"wins\"] || a[\"battlesPlayed\"] - b[\"battlesPlayed\"];\n  });\n};\n\nvar WarPerformance = function WarPerformance(props) {\n  var data = processData(props.items);\n  return participants.map(function (p, i) {\n    __jsx(\"div\", {\n      class: true,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Name: \", p.name), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Wins: \", p.wins), __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Battles: \", p.battlesPlayed));\n  });\n};\n\nexport default WarPerformance;","map":{"version":3,"sources":["/Users/mbp/Sites/london-clash-nextjs/components/WarPerformance.js"],"names":["processData","items","participants","forEach","war","i","console","log","name","battlesPlayed","wins","userObj","findUser","push","sort","a","b","WarPerformance","props","data","map","p"],"mappings":";;;;AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,MAAIC,YAAY,GAAG,EAAnB;AACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,GAAD,EAAMC,CAAN,EAAY;AACtBC,IAAAA,OAAO,CAACC,GAAR,eAAmBF,CAAnB,GAAwBD,GAAxB;AACAA,IAAAA,GAAG,CAACF,YAAJ,CAAiBC,OAAjB,CAAyB,gBAAiC;AAAA,UAA/BK,IAA+B,QAA/BA,IAA+B;AAAA,UAAzBC,aAAyB,QAAzBA,aAAyB;AAAA,UAAVC,IAAU,QAAVA,IAAU;AACtD,UAAIC,OAAO,GAAGC,QAAQ,CAACJ,IAAD,CAAtB;;AACA,UAAI,CAAC,CAACG,OAAN,EAAe;AACXA,QAAAA,OAAO,CAACF,aAAR,IAAyBA,aAAzB;AACAE,QAAAA,OAAO,CAACD,IAAR,IAAgBA,IAAhB;AACH,OAHD,MAGO;AACHC,QAAAA,OAAO,GAAG;AAACH,UAAAA,IAAI,EAAJA,IAAD;AAAOC,UAAAA,aAAa,EAAbA,aAAP;AAAsBC,UAAAA,IAAI,EAAJA;AAAtB,SAAV;AACAR,QAAAA,YAAY,CAACW,IAAb,CAAkBF,OAAlB;AACH;AACJ,KATD;AAUH,GAZD;AAaA,SAAOT,YAAY,CAACY,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAAC,MAAD,CAAD,GAAYD,CAAC,CAAC,MAAD,CAAb,IAAyBA,CAAC,CAAC,eAAD,CAAD,GAAqBC,CAAC,CAAC,eAAD,CAAzD;AAAA,GAAlB,CAAP;AACD,CAhBD;;AAkBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAEhC,MAAMC,IAAI,GAAGnB,WAAW,CAACkB,KAAK,CAACjB,KAAP,CAAxB;AAEA,SAAOC,YAAY,CAACkB,GAAb,CAAiB,UAACC,CAAD,EAAIhB,CAAJ,EAAU;AAChC;AAAK,MAAA,KAAK,MAAV;AAAW,MAAA,GAAG,EAAEA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAagB,CAAC,CAACb,IAAf,CAAnB,EAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaa,CAAC,CAACX,IAAf,CAA9C,EAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBW,CAAC,CAACZ,aAAlB,CAAzE;AACD,GAFM,CAAP;AAKD,CATD;;AAWA,eAAeQ,cAAf","sourcesContent":["const processData = (items) => {\n  var participants = []\n  items.forEach((war, i) => {\n      console.log(`war ${i}`, war);\n      war.participants.forEach(({name, battlesPlayed, wins}) => {\n          var userObj = findUser(name)\n          if (!!userObj) {\n              userObj.battlesPlayed += battlesPlayed\n              userObj.wins += wins\n          } else {\n              userObj = {name, battlesPlayed, wins}\n              participants.push(userObj)\n          }\n      })\n  })\n  return participants.sort((a, b) => b[\"wins\"] - a[\"wins\"] || a[\"battlesPlayed\"] - b[\"battlesPlayed\"])\n}\n\nconst WarPerformance = (props) => {\n\n  const data = processData(props.items)\n\n  return participants.map((p, i) => {\n    <div class key={i}><span>Name: {p.name}</span><span>Wins: {p.wins}</span><span>Battles: {p.battlesPlayed}</span></div>\n  })\n\n\n}\n\nexport default WarPerformance;\n"]},"metadata":{},"sourceType":"module"}