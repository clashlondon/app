{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/mbp/Sites/london-clash-nextjs/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ClanData, WarLog } from '../api';\nimport { Button } from \"shards-react\";\nimport moment from 'moment';\n\nfunction filterMember(key) {\n  return true;\n}\n\nconst WarParticipants = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, props.name);\n\nconst WarSeason = props => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, __jsx(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.seasonId), __jsx(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, moment(props.createdDate).fromNow()), props.participants.map((d, i) => __jsx(WarParticipants, _extends({\n  key: i\n}, d, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}))));\n\nconst WarWinLoss = props => {\n  var participants = [];\n\n  var findUser = name => participants.find(p => p.name === name);\n\n  props.items.forEach((war, i) => {\n    console.log(`war ${i}`, war);\n    war.participants.forEach(({\n      name,\n      battlesPlayed,\n      wins\n    }) => {\n      var userObj = findUser(name);\n\n      if (!!userObj) {\n        userObj.battlesPlayed += battlesPlayed;\n        userObj.wins += wins;\n      } else {\n        userObj = {\n          name,\n          battlesPlayed,\n          wins\n        };\n        users.push(userObj);\n      }\n    });\n  });\n  participants.sort((a, b) => a[\"battlesPlayed\"] - b[\"battlesPlayed\"] || a[\"wins\"] - b[\"wins\"]);\n  return participants.map(p => __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, p.name), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, p.battlesPlayed), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, p.wins)));\n};\n\nconst HomePage = props => __jsx(React.Fragment, null, __jsx(WarWinLoss, _extends({}, props.warlog, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})));\n\nHomePage.getInitialProps = async function () {\n  const warlog = await WarLog();\n  return {\n    warlog\n  };\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/Users/mbp/Sites/london-clash-nextjs/pages/index.js"],"names":["ClanData","WarLog","Button","moment","filterMember","key","WarParticipants","props","name","WarSeason","seasonId","createdDate","fromNow","participants","map","d","i","WarWinLoss","findUser","find","p","items","forEach","war","console","log","battlesPlayed","wins","userObj","users","push","sort","a","b","HomePage","warlog","getInitialProps"],"mappings":"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","sourcesContent":["import { ClanData, WarLog } from '../api'\nimport { Button } from \"shards-react\";\nimport moment from 'moment';\n\nfunction filterMember(key) {\n  return true\n}\n\nconst WarParticipants = (props) => (\n  <div>\n    {props.name}\n  </div>\n)\n\nconst WarSeason = (props) => (\n  <div>\n    <h2>{props.seasonId}</h2>\n    <h3>{moment(props.createdDate).fromNow()}</h3>\n    {props.participants.map((d,i) => <WarParticipants key={i} {...d}></WarParticipants>)}\n  </div>\n)\n\nconst WarWinLoss = (props) => {\n  var participants = []\n  var findUser = (name) => participants.find((p) => p.name === name);\n\n  props.items.forEach((war, i) => {\n      console.log(`war ${i}`, war);\n      war.participants.forEach(({name, battlesPlayed, wins}) => {\n          var userObj = findUser(name)\n          if (!!userObj) {\n              userObj.battlesPlayed += battlesPlayed\n              userObj.wins += wins\n          } else {\n              userObj = {name, battlesPlayed, wins}\n              users.push(userObj)\n          }\n      })\n  })\n\n  participants.sort((a, b) => a[\"battlesPlayed\"] - b[\"battlesPlayed\"] || a[\"wins\"] - b[\"wins\"])\n\n  return participants.map(p => <div><span>{p.name}</span><span>{p.battlesPlayed}</span><span>{p.wins}</span></div>)\n\n}\n\nconst HomePage = (props) => (\n  <>\n    <WarWinLoss {...props.warlog}/>\n  </>\n)\n\nHomePage.getInitialProps = async function() {\n  const warlog = await WarLog()\n  return { warlog }\n}\n\nexport default HomePage\n"]},"metadata":{},"sourceType":"module"}