{"ast":null,"code":"var _jsxFileName = \"/Users/mbp/Sites/london-clash-nextjs/components/WarPerformance.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nconst processData = items => {\n  let participants = [];\n\n  const findUser = name => participants.find(p => p.name === name);\n\n  items.forEach((war, i) => {\n    console.log(`war ${i}`, war);\n    war.participants.forEach(({\n      name,\n      battlesPlayed,\n      wins\n    }) => {\n      var userObj = findUser(name);\n\n      if (!!userObj) {\n        userObj.battlesPlayed += battlesPlayed;\n        userObj.wins += wins;\n      } else {\n        userObj = {\n          name,\n          battlesPlayed,\n          wins\n        };\n        participants.push(userObj);\n      }\n    });\n  });\n  return participants.sort((a, b) => b[\"wins\"] - a[\"wins\"] || a[\"battlesPlayed\"] - b[\"battlesPlayed\"]);\n};\n\nconst WarPerformance = props => {\n  const data = processData(props.items);\n  console.log(data);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"hello\");\n  return __jsx(React.Fragment, null, data.map((p, i) => __jsx(\"div\", {\n    class: true,\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Name: \", p.name), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Wins: \", p.wins), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Battles: \", p.battlesPlayed))));\n};\n\nexport default WarPerformance;","map":{"version":3,"sources":["/Users/mbp/Sites/london-clash-nextjs/components/WarPerformance.js"],"names":["processData","items","participants","findUser","name","find","p","forEach","war","i","console","log","battlesPlayed","wins","userObj","push","sort","a","b","WarPerformance","props","data","map"],"mappings":";;;;AAAA,MAAMA,WAAW,GAAIC,KAAD,IAAW;AAC7B,MAAIC,YAAY,GAAG,EAAnB;;AACA,QAAMC,QAAQ,GAAIC,IAAD,IAAUF,YAAY,CAACG,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACF,IAAF,KAAWA,IAApC,CAA3B;;AACAH,EAAAA,KAAK,CAACM,OAAN,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAa,OAAMF,CAAE,EAArB,EAAwBD,GAAxB;AACAA,IAAAA,GAAG,CAACN,YAAJ,CAAiBK,OAAjB,CAAyB,CAAC;AAACH,MAAAA,IAAD;AAAOQ,MAAAA,aAAP;AAAsBC,MAAAA;AAAtB,KAAD,KAAiC;AACtD,UAAIC,OAAO,GAAGX,QAAQ,CAACC,IAAD,CAAtB;;AACA,UAAI,CAAC,CAACU,OAAN,EAAe;AACXA,QAAAA,OAAO,CAACF,aAAR,IAAyBA,aAAzB;AACAE,QAAAA,OAAO,CAACD,IAAR,IAAgBA,IAAhB;AACH,OAHD,MAGO;AACHC,QAAAA,OAAO,GAAG;AAACV,UAAAA,IAAD;AAAOQ,UAAAA,aAAP;AAAsBC,UAAAA;AAAtB,SAAV;AACAX,QAAAA,YAAY,CAACa,IAAb,CAAkBD,OAAlB;AACH;AACJ,KATD;AAUH,GAZD;AAcA,SAAOZ,YAAY,CAACc,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,MAAD,CAAD,GAAYD,CAAC,CAAC,MAAD,CAAb,IAAyBA,CAAC,CAAC,eAAD,CAAD,GAAqBC,CAAC,CAAC,eAAD,CAA3E,CAAP;AACD,CAlBD;;AAoBA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAEhC,QAAMC,IAAI,GAAGrB,WAAW,CAACoB,KAAK,CAACnB,KAAP,CAAxB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACA,SACE,4BACGA,IAAI,CAACC,GAAL,CAAS,CAAChB,CAAD,EAAIG,CAAJ,KACR;AAAK,IAAA,KAAK,MAAV;AAAW,IAAA,GAAG,EAAEA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAaH,CAAC,CAACF,IAAf,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAaE,CAAC,CAACO,IAAf,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBP,CAAC,CAACM,aAAlB,CAHF,CADD,CADH,CADF;AAWD,CAhBD;;AAkBA,eAAeO,cAAf","sourcesContent":["const processData = (items) => {\n  let participants = []\n  const findUser = (name) => participants.find((p) => p.name === name);\n  items.forEach((war, i) => {\n      console.log(`war ${i}`, war);\n      war.participants.forEach(({name, battlesPlayed, wins}) => {\n          var userObj = findUser(name)\n          if (!!userObj) {\n              userObj.battlesPlayed += battlesPlayed\n              userObj.wins += wins\n          } else {\n              userObj = {name, battlesPlayed, wins}\n              participants.push(userObj)\n          }\n      })\n  })\n\n  return participants.sort((a, b) => b[\"wins\"] - a[\"wins\"] || a[\"battlesPlayed\"] - b[\"battlesPlayed\"])\n}\n\nconst WarPerformance = (props) => {\n\n  const data = processData(props.items)\n  console.log(data)\n  return <div>hello</div>\n  return (\n    <>\n      {data.map((p, i) => (\n        <div class key={i}>\n          <span>Name: {p.name}</span>\n          <span>Wins: {p.wins}</span>\n          <span>Battles: {p.battlesPlayed}</span>\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport default WarPerformance;\n"]},"metadata":{},"sourceType":"module"}