{"version":3,"file":"static/webpack/static/development/pages/index.js.f1ad1d41e88f022bbc89.hot-update.js","sources":["webpack:///./components/WarPerformance.js"],"sourcesContent":["import { useState } from 'react'\n\nclass WarUser {\n  constructor({name, wins, battlesPlayed, cardsEarned, numberOfBattles}) {\n    this.name = name\n    this.wins = wins\n    this.battles = battlesPlayed\n    this.totalBattles = numberOfBattles\n    this.cards = cardsEarned\n    this.isMember = true\n    this.lossStreak = 0\n    this.winStreak = 0\n  }\n\n  addToKey(key, value) {\n    this[key] += value\n  }\n\n  setMember(state) {\n    this.isMember = state\n  }\n\n  winLoss(wins, losses) {\n    if (losses > 0 && wins === 0) {\n      this.lossStreak += losses\n      this.winStreak = 0\n    }\n    if (wins > 0) {\n      this.winStreak += wins\n      this.lossStreak = 0\n    }\n  }\n\n  get loss() {\n    return this.battles - this.wins\n  }\n\n  get ratio() {\n    return this.wins / this.totalBattles\n  }\n\n  get battlesMissed() {\n    return this.totalBattles - this.battles\n  }\n\n  get inRespect() {\n    return this.ratio >= 0.75 || this.loss === 0 && this.missed === 0\n  }\n\n  get inDanger() {\n    return this.ratio <= 0.25 || this.battlesMissed >= 3\n  }\n\n  get score() {\n    if (this.battles === 0) return 0\n    return (this.wins * (this.wins / this.battles) - ((this.battlesMissed * 2.5) * this.battlesMissed) + (this.wins * 0.5)).toFixed(2)\n  }\n}\n\nconst processData = (items, clan) => {\n  let participants = []\n  const findUser = (name) => participants.find((p) => p.name === name);\n  items.forEach((war, i) => {\n      war.participants.forEach((user) => {\n          var userObj = findUser(user.name)\n          if (!!userObj) {\n              userObj.addToKey('battles', user.battlesPlayed)\n              userObj.addToKey('wins', user.wins)\n              userObj.addToKey('cards', user.cardsEarned)\n              userObj.addToKey('totalBattles', user.numberOfBattles)\n          } else {\n              userObj = new WarUser(user)\n              participants.push(userObj)\n          }\n          // set is member\n          userObj.setMember(clan.memberList.find(m => m.name === userObj.name))\n          // record wins losses per war\n          let losses = user.numberOfBattles - user.wins\n          userObj.winLoss(user.wins, losses)\n      })\n  })\n  return participants\n}\n\nconst sortData = (items, key, alt) => {\n  return items.sort((a, b) => alt ? a[key] - b[key] : b[key] - a[key])\n}\n\nconst WarPerformance = (props) => {\n  const [sort, setSort] = useState('score')\n  const [alt, setAlt] = useState(false)\n  const [data, setData] = useState(processData(props.items, props.clan))\n\n  const sortedData = sortData(data, sort, alt)\n\n  const clickSort = (newSort) => {\n    if (newSort === sort) {\n      setAlt(!alt)\n    } else {\n      setSort(newSort)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"table-responsive\">\n        <table className={'table table-sm'}>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th className={sort === 'score' ? 'active' : null} onClick={(() => clickSort('score'))}>Score</th>\n              <th className={sort === 'totalBattles' ? 'active' : null} onClick={(() => clickSort('totalBattles'))}>Total Battles</th>\n              <th className={sort === 'wins' ? 'active' : null} onClick={(() => clickSort('wins'))}>Wins</th>\n              <th className={sort === 'loss' ? 'active' : null} onClick={(() => clickSort('loss'))}>Losses</th>\n              <th className={sort === 'winStreak' ? 'active' : null} onClick={(() => clickSort('winStreak'))}>Win Streak</th>\n              <th className={sort === 'lossStreak' ? 'active' : null} onClick={(() => clickSort('lossStreak'))}>Loss Streak</th>\n              <th className={sort === 'ratio' ? 'active' : null} onClick={(() => clickSort('ratio'))}>Win Ratio<span>wins/battles</span></th>\n              <th className={sort === 'battlesMissed' ? 'active' : null} onClick={(() => clickSort('battlesMissed'))}>Battles Missed</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedData.map((p, i) => {\n              let className = p.score < -1 ? 'bg-danger' : p.score >= 8 ? 'table-warning' : p.score >= 4 ? 'table-success' : null\n              className += p.isMember ? ' member' : ''\n              return (\n                <tr key={i}>\n                  <td className={className}>{p.name}</td>\n                  <td>{p.score}</td>\n                  <td>{p.totalBattles}</td>\n                  <td>{p.wins}</td>\n                  <td>{p.loss}</td>\n                  <td>{p.winStreak}</td>\n                  <td>{p.lossStreak}</td>\n                  <td>{p.ratio.toFixed(2)}</td>\n                  <td>{p.battlesMissed}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n      <style jsx>{`\n        .table-responsive {\n          overflow-x: initial;\n        }\n        .table {\n          width: 100%;\n        }\n        .table thead {\n          font-weight: bold;\n        }\n        .table thead th {\n          cursor: pointer;\n          position: sticky;\n          top: 0;\n          background: white;\n          min-width: 8rem;\n        }\n        .table thead th span {\n          display: block;\n          font-size: 0.5rem;\n        }\n        .table thead th.active {\n          color: blue;\n        }\n        table tbody td:first-child:not(.member) {\n          text-decoration: line-through;\n          font-weight: bold;\n          background-color: grey !important;\n        }\n        `}\n      </style>\n    </>\n  )\n}\n\nexport default WarPerformance;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAjCA;AAAA;AAAA;AAsEA;AACA;AACA;;;;A","sourceRoot":""}